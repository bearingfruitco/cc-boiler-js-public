# Compact Context Command

Optimize context window by summarizing completed work and removing unnecessary details.

## Usage
```bash
/compact
/cp  # alias
```

## When to Use
- Between major phases of work
- Before starting complex tasks
- When approaching token limits
- After completing multiple tasks

## What It Does

1. **Summarizes Completed Work**
   ```markdown
   ## Work Completed
   - ✅ Database schema created
   - ✅ API routes implemented
   - ✅ Basic tests written
   
   ## Key Decisions Made
   - Using Drizzle ORM for type safety
   - JWT tokens with 24hr expiry
   - Field-level encryption for PII
   ```

2. **Preserves Critical Context**
   - Active task list
   - Unresolved issues
   - Key file paths
   - Important patterns discovered

3. **Removes Redundant Information**
   - Detailed implementation steps
   - Resolved error messages
   - Intermediate debugging output
   - Completed task details

## Implementation

```typescript
// Analyze current context
const context = {
  completed: [...],
  active: [...],
  critical: [...],
  redundant: [...]
};

// Create compact summary
const summary = {
  phase: "current phase",
  completed: "high-level summary",
  nextSteps: "immediate tasks",
  keyPatterns: "discovered patterns",
  warnings: "gotchas to remember"
};

// Save full context to checkpoint
await saveCheckpoint("pre-compact", fullContext);

// Return compact version
return formatCompactSummary(summary);
```

## Example Output

```markdown
## Compact Summary - Auth Feature

### Progress: 70% Complete
Phase 1 ✓ | Phase 2 ▶ | Phase 3 ◯

### Completed
- Database schema with user/session tables
- JWT implementation with refresh tokens
- Basic auth endpoints (login/logout/refresh)

### Active Work
- Task 3.2: Add rate limiting to auth endpoints
- Task 3.3: Implement password reset flow

### Key Context
- JWT_SECRET in .env (not committed)
- Using httpOnly cookies for tokens
- Rate limit: 5 attempts per 15 min

### Next Steps
Continue with: /pt auth-feature
```

## Integration with Workflow

```bash
# Typical usage pattern
/prd user-auth          # Generate PRD
/gt user-auth           # Generate tasks
/pt user-auth           # Process phase 1 tasks
/compact                # Optimize context
/pt user-auth           # Continue with phase 2
```

This command helps maintain focus and performance throughout long development sessions.