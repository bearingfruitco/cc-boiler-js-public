{
  "chains": {
    "database-optimization": {
      "description": "Optimize database performance with v3.0 specialists",
      "steps": [
        {
          "agent": "performance",
          "task": "Analyze database performance metrics"
        },
        {
          "agent": "supabase-specialist",
          "task": "Optimize Supabase queries, indexes, and RLS policies"
        },
        {
          "agent": "orm-specialist",
          "task": "Optimize ORM queries and implement efficient patterns"
        },
        {
          "agent": "database-architect",
          "task": "Review and optimize overall database design"
        },
        {
          "agent": "qa",
          "task": "Create performance benchmarks"
        }
      ]
    },
    "morning-setup": {
      "description": "Complete morning setup routine",
      "commands": [
        "smart-resume",
        "security-check deps",
        "test-runner changed"
      ]
    },
    "supabase-auth-flow": {
      "description": "Complete Supabase authentication implementation",
      "steps": [
        {
          "agent": "supabase-specialist",
          "task": "Design auth schema and RLS policies"
        },
        {
          "agent": "backend",
          "task": "Implement auth endpoints"
        },
        {
          "agent": "ui-systems",
          "task": "Build auth UI components"
        },
        {
          "agent": "privacy-compliance",
          "task": "Add consent flows and compliance"
        },
        {
          "agent": "qa",
          "task": "Test auth flow end-to-end"
        }
      ]
    },
    "analytics-pipeline": {
      "description": "Full analytics implementation with tracking",
      "steps": [
        {
          "agent": "event-schema",
          "task": "Design event taxonomy"
        },
        {
          "agent": "analytics-engineer",
          "task": "Set up RudderStack and DBT models"
        },
        {
          "agent": "backend",
          "task": "Implement event endpoints"
        },
        {
          "agent": "privacy-compliance",
          "task": "Ensure tracking compliance"
        }
      ]
    },
    "production-ready-feature": {
      "description": "Full-stack feature with all requirements",
      "steps": [
        {
          "agent": "pm-orchestrator",
          "task": "Break down requirements and coordinate"
        },
        {
          "agent": "event-schema",
          "task": "Design data model and events"
        },
        {
          "agent": "orm-specialist",
          "task": "Create database schema and migrations"
        },
        {
          "agent": "supabase-specialist",
          "task": "Implement backend with RLS"
        },
        {
          "agent": "ui-systems",
          "task": "Build frontend components"
        },
        {
          "agent": "analytics-engineer",
          "task": "Add tracking and metrics"
        },
        {
          "agent": "privacy-compliance",
          "task": "Ensure compliance"
        },
        {
          "agent": "platform-deployment",
          "task": "Optimize deployment"
        },
        {
          "agent": "qa",
          "task": "Comprehensive testing"
        },
        {
          "agent": "documentation-writer",
          "task": "Update documentation"
        }
      ]
    },
    "tech-stack-optimization": {
      "description": "Optimize entire technology stack",
      "steps": [
        {
          "agent": "performance",
          "task": "Analyze performance bottlenecks"
        },
        {
          "agent": "supabase-specialist",
          "task": "Optimize database queries and indexes"
        },
        {
          "agent": "orm-specialist",
          "task": "Optimize ORM queries"
        },
        {
          "agent": "ui-systems",
          "task": "Optimize frontend bundles and rendering"
        },
        {
          "agent": "platform-deployment",
          "task": "Configure edge caching and CDN"
        }
      ]
    },
    "pre-pr": {
      "description": "Pre-PR validation suite (with browser checks)",
      "commands": [
        "validate-design",
        "test-runner changed",
        "pw-verify",
        "pw-a11y",
        "verify --full",
        "performance-monitor check",
        "security-check all"
      ],
      "stopOnError": true
    },
    "feature-complete": {
      "description": "Complete feature workflow (enhanced with Playwright verification)",
      "commands": [
        "checkpoint create pre-complete",
        "analyze-task",
        "orchestrate if needed",
        "validate-design",
        "test-runner all",
        "pw-verify",
        "pw-console",
        "agent-health technology",
        "performance-monitor compare",
        "security-check all",
        "feature-workflow complete"
      ],
      "stopOnError": true
    },
    "quick-check": {
      "description": "Quick validation check",
      "commands": [
        "validate-design current",
        "test-runner current"
      ]
    },
    "daily-report": {
      "description": "Generate daily reports",
      "commands": [
        "work-status list",
        "todo report",
        "analytics report",
        "performance-monitor report"
      ]
    },
    "error-fix": {
      "description": "Common error recovery",
      "commands": [
        "error-recovery deps",
        "error-recovery build",
        "validate-design"
      ]
    },
    "feature-planning": {
      "description": "Plan new feature with PRD and tasks",
      "commands": [
        "create-prd",
        "generate-tasks",
        "task-ledger sync",
        "task-status"
      ]
    },
    "architecture-design": {
      "description": "Design complete system architecture from PRD",
      "steps": [
        {
          "command": "sequential-thinking",
          "args": "analyze PRD and extract technical requirements",
          "output": "technical-requirements.md"
        },
        {
          "agent": "system-architect",
          "task": "Design system components, data models, and API structure based on requirements",
          "output": "system-design.md"
        },
        {
          "command": "create-architecture",
          "interactive": true,
          "description": "Interview for technical preferences and generate architecture docs"
        },
        {
          "agent": "database-architect",
          "task": "Design optimal database schema with relationships and indexes",
          "output": "database-schema.md"
        },
        {
          "agent": "security-threat-analyst",
          "task": "Create security architecture and threat model",
          "output": "security-design.md"
        },
        {
          "command": "create-prp",
          "args": "database setup and migrations",
          "output": "database-prp.md"
        },
        {
          "command": "create-prp",
          "args": "api implementation",
          "output": "api-prp.md"
        },
        {
          "command": "create-prp",
          "args": "frontend architecture",
          "output": "frontend-prp.md"
        },
        {
          "command": "validate-architecture",
          "description": "Validate architecture completeness and consistency"
        }
      ]
    },
    "task-sprint": {
      "description": "Work through tasks systematically",
      "commands": [
        "task-ledger",
        "task-status",
        "process-tasks",
        "verify",
        "task-checkpoint"
      ]
    },
    "task-review": {
      "description": "Review task implementation",
      "commands": [
        "verify",
        "validate-design",
        "test-runner current",
        "browser-test-flow"
      ]
    },
    "context-maintenance": {
      "description": "Maintain project context",
      "commands": [
        "auto-update-context",
        "analyze-project",
        "generate-docs"
      ]
    },
    "daily-startup": {
      "description": "Enhanced daily startup with v3.0 health checks",
      "commands": [
        "smart-resume",
        "agent-health all",
        "show-metrics dashboard",
        "task-ledger summary",
        "task-status",
        "work-status",
        "todo list"
      ]
    },
    "safe-commit": {
      "description": "Safe commit with validation checks",
      "commands": [
        "facts all",
        "validate-design",
        "lint:fix",
        "test-runner changed"
      ],
      "stopOnError": true
    },
    "field-sync": {
      "description": "Sync all field registry generated code",
      "commands": [
        "field-generate types",
        "field-generate schemas",
        "field-generate factories",
        "field-generate masking"
      ]
    },
    "pre-component": {
      "description": "Check before creating new component",
      "commands": [
        "exists",
        "facts components"
      ]
    },
    "branch-aware-startup": {
      "description": "Branch-aware daily startup",
      "commands": [
        "smart-resume",
        "branch-status",
        "feature-status current",
        "task-status"
      ]
    },
    "safe-feature-complete": {
      "description": "Complete feature with state management",
      "commands": [
        "validate-design",
        "test-runner all",
        "verify --full",
        "stage-validate check",
        "feature-complete",
        "branch-status"
      ],
      "stopOnError": true
    },
    "branch-maintenance": {
      "description": "Branch cleanup and maintenance",
      "commands": [
        "sync-main",
        "branch-clean --dry-run",
        "branch-status"
      ]
    },
    "tdd-cycle": {
      "description": "TDD red-green-refactor cycle",
      "commands": [
        "test",
        "verify --quick",
        "process-tasks",
        "verify"
      ],
      "stopOnError": false
    },
    "verify-complete": {
      "description": "Comprehensive verification before marking complete",
      "commands": [
        "verify --full",
        "stage-validate check",
        "feature-complete"
      ],
      "stopOnError": true
    },
    "analyze-existing-project": {
      "description": "Drop into existing project and set up full system",
      "commands": [
        "analyze-existing full",
        "smart-resume",
        "validate-design"
      ]
    },
    "migrate-design-system": {
      "description": "Migrate existing code to strict design system",
      "commands": [
        "migrate-to-strict-design analyze",
        "checkpoint create pre-migration",
        "migrate-to-strict-design migrate",
        "validate-design",
        "test-runner changed"
      ],
      "stopOnError": true
    },
    "onboard-existing": {
      "description": "Complete onboarding for existing project",
      "commands": [
        "analyze-existing full",
        "migrate-to-strict-design analyze",
        "create-prd-from-existing main-features",
        "task-ledger sync",
        "branch-status"
      ]
    },
    "standards-sync": {
      "description": "Sync with global standards",
      "commands": [
        "smart-resume",
        "validate-design --check-standards",
        "migrate-to-strict-design analyze"
      ]
    },
    "multi-perspective-review": {
      "description": "Review code from multiple expert angles simultaneously",
      "commands": [
        "orchestrate-agents 'Review from security perspective' --persona security",
        "orchestrate-agents 'Review from performance perspective' --persona performance",
        "orchestrate-agents 'Review from frontend UX perspective' --persona frontend",
        "orchestrate-agents 'Review from architecture perspective' --persona architect",
        "orchestrate-agents 'Synthesize all review findings' --persona architect"
      ],
      "parallel": true,
      "synthesize": true
    },
    "worktree-setup": {
      "description": "Setup parallel worktrees for multi-feature development",
      "commands": [
        "checkpoint create pre-worktree",
        "git-status",
        "bash .claude/scripts/worktree-manager.sh create",
        "work-status"
      ]
    },
    "worktree-execute": {
      "description": "Execute tasks in worktrees with orchestration",
      "commands": [
        "worktree-parallel --orchestrate",
        "bash .claude/scripts/worktree-manager.sh status"
      ],
      "parallel": true
    },
    "worktree-review-merge": {
      "description": "Review and merge worktree changes",
      "commands": [
        "validate-design --all-worktrees",
        "test-runner --all-worktrees",
        "bash .claude/scripts/worktree-manager.sh pr",
        "branch-status"
      ],
      "stopOnError": true
    },
    "security-baseline": {
      "description": "Establish security baseline for project",
      "commands": [
        "spawn-security-auditor security-auditor --scope full",
        "generate-rls all",
        "dependency-scan",
        "security-status"
      ]
    },
    "secure-api-creation": {
      "description": "Create API with full security",
      "commands": [
        "create-secure-api",
        "generate-rls",
        "spawn-security-auditor security-auditor --scope api --quick",
        "security-check api"
      ],
      "stopOnError": true
    },
    "security-fix": {
      "description": "Fix security issues automatically",
      "commands": [
        "spawn-security-auditor security-auditor --fix",
        "test-runner security",
        "verify --security"
      ]
    },
    "pre-deploy-security": {
      "description": "Security checks before deployment",
      "commands": [
        "dependency-scan --production",
        "spawn-security-auditor security-auditor --scope full",
        "security-check all",
        "security-audit --report"
      ],
      "stopOnError": true
    },
    "secure-form-workflow": {
      "description": "Create form with complete security",
      "commands": [
        "create-secure-form",
        "audit-form-security",
        "security-check form"
      ]
    },
    "security-audit-chain": {
      "description": "Comprehensive security audit with specialized agents",
      "steps": [
        {
          "agent": "security-threat-analyst",
          "task": "Perform comprehensive security vulnerability analysis including OWASP top 10, authentication, authorization, data validation, and API security",
          "output": "security-vulnerabilities.md"
        },
        {
          "agent": "analyzer",
          "task": "Trace security-critical code paths and identify potential attack vectors",
          "output": "security-code-paths.md"
        },
        {
          "agent": "backend",
          "task": "Review API endpoints for security best practices and implement fixes",
          "output": "api-security-fixes.md"
        },
        {
          "agent": "documentation-writer",
          "task": "Document all security findings, remediation steps, and security best practices",
          "output": "security-report.md"
        }
      ],
      "stopOnError": true
    },
    "feature-development-chain": {
      "description": "Full feature development with TDD and multi-agent collaboration",
      "parallel": true,
      "steps": [
        {
          "phase": "planning",
          "agents": [
            {
              "agent": "pm-orchestrator",
              "task": "Coordinate feature development and create implementation plan"
            },
            {
              "agent": "event-schema",
              "task": "Design data model and event taxonomy"
            },
            {
              "agent": "system-architect",
              "task": "Design technical architecture and create ADRs"
            },
            {
              "agent": "orm-specialist",
              "task": "Design database schema with optimal relations and migrations"
            },
            {
              "agent": "qa",
              "task": "Create comprehensive test plan from requirements"
            }
          ]
        },
        {
          "phase": "implementation",
          "agents": [
            {
              "agent": "tdd-engineer",
              "task": "Implement feature using test-first approach"
            },
            {
              "agent": "supabase-specialist",
              "task": "Implement backend with RLS policies"
            },
            {
              "agent": "ui-systems",
              "task": "Build UI components with Shadcn UI and animations"
            },
            {
              "agent": "backend",
              "task": "Implement reliable API endpoints with proper error handling"
            },
            {
              "agent": "analytics-engineer",
              "task": "Implement tracking and analytics"
            }
          ]
        },
        {
          "phase": "review",
          "agents": [
            {
              "agent": "code-reviewer",
              "task": "Review all implementation for best practices"
            },
            {
              "agent": "privacy-compliance",
              "task": "Ensure GDPR/CCPA compliance"
            },
            {
              "agent": "security-threat-analyst",
              "task": "Security audit of new feature"
            },
            {
              "agent": "performance",
              "task": "Optimize performance bottlenecks"
            },
            {
              "agent": "platform-deployment",
              "task": "Optimize deployment configuration"
            }
          ]
        }
      ]
    },
    "database-migration-chain": {
      "description": "Safe database migration with multi-agent validation",
      "steps": [
        {
          "agent": "database-architect",
          "task": "Design optimal schema changes and indexes",
          "output": "schema-design.md"
        },
        {
          "agent": "migration-specialist",
          "task": "Create migration scripts with rollback procedures",
          "output": "migration-scripts/"
        },
        {
          "agent": "backend",
          "task": "Update API endpoints and ensure backward compatibility",
          "output": "api-updates.md"
        },
        {
          "agent": "qa",
          "task": "Create comprehensive tests for data integrity",
          "output": "migration-tests/"
        },
        {
          "agent": "documentation-writer",
          "task": "Document migration process and rollback procedures",
          "output": "migration-guide.md"
        }
      ],
      "stopOnError": true
    },
    "performance-optimization-chain": {
      "description": "Comprehensive performance optimization workflow (enhanced with v3.0)",
      "steps": [
        {
          "agent": "performance",
          "task": "Analyze performance bottlenecks and create optimization plan",
          "output": "performance-analysis.md"
        },
        {
          "agent": "supabase-specialist",
          "task": "Optimize Supabase queries, indexes, and connection pooling",
          "output": "supabase-optimizations.md"
        },
        {
          "agent": "orm-specialist",
          "task": "Optimize ORM queries and implement query caching",
          "output": "orm-optimizations.md"
        },
        {
          "agent": "ui-systems",
          "task": "Optimize UI rendering, bundle size, and implement code splitting",
          "output": "ui-optimizations.md"
        },
        {
          "agent": "backend",
          "task": "Optimize API queries and implement caching",
          "output": "api-optimizations.md"
        },
        {
          "agent": "platform-deployment",
          "task": "Configure edge caching, CDN, and optimize Vercel deployment",
          "output": "deployment-optimizations.md"
        },
        {
          "agent": "database-architect",
          "task": "Optimize database queries and indexes",
          "output": "db-optimizations.md"
        },
        {
          "agent": "qa",
          "task": "Create performance test suite and benchmarks",
          "output": "performance-tests/"
        }
      ]
    },
    "refactoring-chain": {
      "description": "Safe refactoring with comprehensive validation",
      "steps": [
        {
          "agent": "refactoring-expert",
          "task": "Analyze code and create refactoring plan",
          "output": "refactoring-plan.md"
        },
        {
          "agent": "tdd-engineer",
          "task": "Ensure comprehensive test coverage before refactoring",
          "output": "test-coverage-report.md"
        },
        {
          "agent": "refactoring-expert",
          "task": "Execute refactoring following the plan",
          "output": "refactored-code/"
        },
        {
          "agent": "code-reviewer",
          "task": "Review refactored code for quality and correctness",
          "output": "refactoring-review.md"
        },
        {
          "agent": "qa",
          "task": "Run regression tests and verify functionality",
          "output": "regression-test-results.md"
        }
      ],
      "stopOnError": true
    },
    "full-stack-feature-v4": {
      "description": "Complete feature automation from requirements to deployment (v4.0)",
      "parameters": {
        "feature_name": "string",
        "requirements": "string"
      },
      "phases": [
        {
          "name": "requirements-analysis",
          "parallel": false,
          "steps": [
            {
              "command": "analyze-requirements",
              "args": "${feature_name}",
              "output": "requirements.md"
            },
            {
              "agent": "pm-orchestrator",
              "task": "Break down ${requirements} into implementation tasks",
              "output": "tasks.json"
            },
            {
              "agent": "threat-modeler",
              "task": "Generate threat model using STRIDE methodology",
              "output": "threat-model.md"
            }
          ]
        },
        {
          "name": "design-generation",
          "parallel": true,
          "steps": [
            {
              "agent": "systems-architect",
              "task": "Design technical architecture and create ADRs",
              "output": "architecture/"
            },
            {
              "agent": "event-schema",
              "task": "Design event taxonomy and data model",
              "output": "schemas/"
            },
            {
              "agent": "database-architect",
              "task": "Design optimal database schema with migrations",
              "output": "migrations/"
            },
            {
              "agent": "ui-systems",
              "task": "Create UI mockups and component hierarchy",
              "output": "designs/"
            }
          ]
        },
        {
          "name": "security-setup",
          "parallel": false,
          "steps": [
            {
              "command": "generate-rls all",
              "validate": true
            },
            {
              "agent": "security-auditor",
              "task": "Generate security policies and permission matrix",
              "output": "security/"
            },
            {
              "command": "create-security-tests",
              "args": "${feature_name}"
            }
          ]
        },
        {
          "name": "tdd-implementation",
          "parallel": false,
          "steps": [
            {
              "agent": "tdd-engineer",
              "task": "Generate comprehensive test suite from requirements",
              "output": "tests/",
              "expectFailure": true
            },
            {
              "command": "test",
              "expectFailure": true,
              "reason": "RED phase - tests should fail initially"
            },
            {
              "parallel": true,
              "agents": [
                {
                  "agent": "backend-reliability-engineer",
                  "task": "Implement API endpoints to pass tests",
                  "output": "app/api/"
                },
                {
                  "agent": "supabase-specialist",
                  "task": "Implement database layer with RLS to pass tests",
                  "output": "lib/db/"
                },
                {
                  "agent": "ui-systems",
                  "task": "Build UI components to pass tests",
                  "output": "components/"
                }
              ]
            },
            {
              "command": "test",
              "expectSuccess": true,
              "reason": "GREEN phase - all tests should pass"
            }
          ]
        },
        {
          "name": "quality-assurance",
          "parallel": true,
          "steps": [
            {
              "agent": "refactoring-expert",
              "task": "Refactor code while maintaining test coverage",
              "output": "refactored/"
            },
            {
              "agent": "performance-optimizer",
              "task": "Optimize performance and add monitoring",
              "output": "optimizations/"
            },
            {
              "agent": "privacy-compliance",
              "task": "Ensure GDPR/CCPA compliance",
              "output": "compliance/"
            },
            {
              "agent": "documentation-writer",
              "task": "Generate comprehensive documentation",
              "output": "docs/"
            }
          ]
        },
        {
          "name": "deployment-prep",
          "parallel": false,
          "steps": [
            {
              "command": "validate-design --strict"
            },
            {
              "command": "test:all"
            },
            {
              "command": "security-check all"
            },
            {
              "command": "performance-check"
            },
            {
              "agent": "platform-deployment",
              "task": "Optimize deployment configuration",
              "output": "deployment/"
            }
          ]
        }
      ],
      "rollback": {
        "enabled": true,
        "checkpoints": [
          "pre-implementation",
          "post-implementation",
          "pre-deployment"
        ]
      }
    },
    "security-first-api-v4": {
      "description": "Create API with mandatory security (v4.0)",
      "parameters": {
        "api_name": "string",
        "requirements": "string"
      },
      "steps": [
        {
          "agent": "security-threat-analyst",
          "task": "Analyze API requirements and identify threats",
          "output": "threats.md"
        },
        {
          "agent": "security-threat-analyst",
          "task": "Generate comprehensive security rules",
          "output": "security-rules.json"
        },
        {
          "command": "generate-rls ${api_name}"
        },
        {
          "agent": "tdd-engineer",
          "task": "Create security test suite",
          "output": "tests/security/"
        },
        {
          "agent": "backend",
          "task": "Implement secure API with all controls",
          "output": "app/api/${api_name}/"
        },
        {
          "command": "test:security ${api_name}"
        },
        {
          "command": "security-audit ${api_name}"
        }
      ]
    },
    "performance-optimization-v4": {
      "description": "Comprehensive performance optimization with real-time monitoring (v4.0)",
      "steps": [
        {
          "command": "performance-baseline",
          "output": "baseline-metrics.json"
        },
        {
          "agent": "performance",
          "task": "Analyze all performance bottlenecks",
          "output": "bottlenecks.md"
        },
        {
          "parallel": true,
          "agents": [
            {
              "agent": "supabase-specialist",
              "task": "Optimize database queries and add indexes"
            },
            {
              "agent": "ui-systems",
              "task": "Optimize bundle size and implement code splitting"
            },
            {
              "agent": "backend",
              "task": "Add caching layers and optimize API responses"
            }
          ]
        },
        {
          "command": "performance-compare baseline",
          "threshold": 20,
          "reason": "Expect 20% improvement"
        },
        {
          "agent": "platform-deployment",
          "task": "Configure edge optimization and CDN",
          "output": "edge-config/"
        }
      ]
    },
    "automated-error-recovery-v4": {
      "description": "Intelligent error detection and auto-fix (v4.0)",
      "trigger": "on-error",
      "steps": [
        {
          "command": "capture-error-context"
        },
        {
          "agent": "senior-engineer",
          "task": "Analyze error and propose solutions",
          "output": "error-analysis.md"
        },
        {
          "agent": "analyzer",
          "task": "Trace error source and identify root cause",
          "output": "root-cause.md"
        },
        {
          "command": "search-knowledge-base ${error_pattern}"
        },
        {
          "conditional": {
            "if": "solution_found",
            "then": [
              {
                "command": "apply-known-fix"
              },
              {
                "command": "test"
              }
            ],
            "else": [
              {
                "agent": "senior-engineer",
                "task": "Implement custom fix",
                "output": "fix/"
              },
              {
                "command": "test"
              },
              {
                "command": "update-knowledge-base"
              }
            ]
          }
        }
      ]
    },
    "predictive-development-v4": {
      "description": "AI-powered predictive development assistance (v4.0)",
      "trigger": "on-file-change",
      "steps": [
        {
          "command": "analyze-development-pattern"
        },
        {
          "agent": "analyzer",
          "task": "Predict next likely development steps",
          "output": "predictions.json"
        },
        {
          "conditional": {
            "if": "confidence > 0.7",
            "then": [
              {
                "command": "pre-generate-resources",
                "args": "${predictions}"
              },
              {
                "command": "show-suggestions",
                "interactive": true
              }
            ]
          }
        }
      ]
    },
    "accessibility-first-v4": {
      "description": "Enforce accessibility from the start (v4.0)",
      "trigger": "on-component-create",
      "steps": [
        {
          "agent": "frontend-ux-specialist",
          "task": "Generate ARIA requirements and keyboard navigation",
          "output": "a11y-requirements.md"
        },
        {
          "command": "generate-a11y-tests"
        },
        {
          "agent": "ui-systems",
          "task": "Implement component with accessibility features",
          "constraints": [
            "wcag-2.1-aa",
            "keyboard-navigable",
            "screen-reader-compatible"
          ]
        },
        {
          "command": "test:a11y",
          "threshold": 95
        },
        {
          "command": "generate-a11y-docs"
        }
      ]
    },
    "safe-staging-deploy": {
      "description": "Safe deployment to staging with all checks",
      "commands": [
        "env-validate",
        "test-runner all",
        "validate-design --strict",
        "security-check all",
        "performance-monitor baseline",
        "deploy-staging",
        "smoke-test staging",
        "performance-monitor compare"
      ],
      "stopOnError": true
    },
    "safe-production-deploy": {
      "description": "Production deployment with comprehensive validation",
      "commands": [
        "env-switch production",
        "checkpoint create pre-deploy",
        "test-runner all --production",
        "security-check all --production",
        "performance-monitor baseline",
        "production-preview",
        "deploy-production --confirm",
        "smoke-test production",
        "performance-monitor verify"
      ],
      "stopOnError": true,
      "requiresConfirmation": true
    },
    "environment-setup": {
      "description": "Set up all environment files and validate",
      "commands": [
        "bash scripts/setup-environments.sh",
        "env-validate",
        "test-runner connectivity"
      ]
    },
    "staging-smoke-test": {
      "description": "Run smoke tests on staging environment",
      "commands": [
        "test-runner smoke --env=staging",
        "browser-test critical-paths --env=staging",
        "api-test health --env=staging",
        "performance-test basic --env=staging"
      ]
    },
    "rollback-deployment": {
      "description": "Emergency rollback procedure",
      "commands": [
        "checkpoint list",
        "deploy-rollback --select",
        "smoke-test production",
        "notify-team rollback"
      ],
      "requiresConfirmation": true
    },
    "browser-verified-component": {
      "description": "Create component with automatic browser verification",
      "steps": [
        {
          "agent": "ui-systems",
          "task": "Create the component following design system"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify component renders correctly in browser"
        },
        {
          "agent": "qa",
          "task": "Create interaction tests"
        },
        {
          "agent": "performance",
          "task": "Check component performance metrics"
        }
      ]
    },
    "visual-regression-check": {
      "description": "Automated visual regression testing workflow",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Capture baseline screenshots"
        },
        {
          "agent": "automation-workflow-engineer",
          "task": "Store baselines with commit reference"
        },
        {
          "agent": "playwright-specialist",
          "task": "Compare current state with baselines"
        },
        {
          "agent": "ui-systems",
          "task": "Review and approve visual changes if needed"
        }
      ]
    },
    "full-accessibility-audit": {
      "description": "Comprehensive accessibility testing and fixes",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Run automated a11y tests (axe-core)"
        },
        {
          "agent": "frontend-ux-specialist",
          "task": "Manual keyboard navigation testing"
        },
        {
          "agent": "frontend-specialist",
          "task": "Fix identified issues"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify fixes and generate WCAG report"
        }
      ]
    },
    "cross-component-interaction": {
      "description": "Test component integration in browser",
      "steps": [
        {
          "command": "analyze-dependencies",
          "output": "component-map.json"
        },
        {
          "agent": "playwright-specialist",
          "task": "Test component interactions and state management"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify event propagation between components"
        },
        {
          "agent": "backend",
          "task": "Validate data flow and API integration"
        },
        {
          "agent": "qa",
          "task": "Create integration test suite"
        }
      ]
    },
    "browser-tdd-flow": {
      "description": "TDD workflow with browser testing integration",
      "steps": [
        {
          "agent": "tdd-engineer",
          "task": "Write failing unit tests"
        },
        {
          "agent": "playwright-specialist",
          "task": "Write failing browser tests"
        },
        {
          "agent": "frontend-specialist",
          "task": "Implement to pass all tests"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify implementation in browser"
        }
      ]
    },
    "pr-browser-check": {
      "description": "Automated PR browser testing",
      "commands": [
        "get-preview-url",
        "pw-smoke-test",
        "pw-console",
        "pw-perf",
        "pw-screenshot full-page",
        "post-pr-comment"
      ],
      "stopOnError": true
    },
    "debug-browser-issue": {
      "description": "Debug reported browser issues",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Reproduce issue in browser"
        },
        {
          "agent": "playwright-specialist",
          "task": "Capture browser state and console logs"
        },
        {
          "agent": "analyzer",
          "task": "Analyze JavaScript execution"
        },
        {
          "agent": "senior-engineer",
          "task": "Implement fix"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify fix in browser"
        }
      ]
    },
    "browser-performance-audit": {
      "description": "Browser performance testing",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Capture Core Web Vitals"
        },
        {
          "agent": "playwright-specialist",
          "task": "Measure JavaScript execution time"
        },
        {
          "agent": "performance",
          "task": "Analyze performance data"
        },
        {
          "agent": "ui-systems",
          "task": "Implement performance optimizations"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify improvements"
        }
      ]
    },
    "form-validation-flow": {
      "description": "Complete form testing workflow",
      "steps": [
        {
          "agent": "form-builder-specialist",
          "task": "Create form with validation"
        },
        {
          "agent": "playwright-specialist",
          "task": "Test all validation scenarios"
        },
        {
          "agent": "playwright-specialist",
          "task": "Test keyboard navigation"
        },
        {
          "agent": "playwright-specialist",
          "task": "Test error handling and recovery"
        },
        {
          "agent": "privacy-compliance",
          "task": "Verify data handling compliance"
        }
      ]
    },
    "mobile-responsive-test": {
      "description": "Mobile responsiveness testing",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Test in mobile viewport sizes"
        },
        {
          "agent": "playwright-specialist",
          "task": "Test touch interactions"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify responsive design breakpoints"
        },
        {
          "agent": "ui-systems",
          "task": "Fix responsive issues"
        },
        {
          "agent": "playwright-specialist",
          "task": "Final mobile verification"
        }
      ]
    },
    "component-testing": {
      "description": "Comprehensive component testing",
      "commands": [
        "test-runner component",
        "pw-verify",
        "pw-screenshot",
        "pw-a11y",
        "validate-design current"
      ]
    },
    "browser-test-flow": {
      "description": "Complete browser testing workflow",
      "commands": [
        "pw-verify",
        "pw-console",
        "pw-vitals",
        "pw-a11y",
        "pw-baseline compare"
      ]
    },
    "browser-error-recovery": {
      "description": "Debug and fix browser-specific errors",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Reproduce error in browser environment"
        },
        {
          "agent": "analyzer",
          "task": "Analyze browser state and console"
        },
        {
          "agent": "frontend-specialist",
          "task": "Implement fix"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify fix in multiple browsers"
        }
      ]
    },
    "pr-browser-validation": {
      "description": "Automated PR browser testing before merge",
      "steps": [
        {
          "agent": "automation-workflow-engineer",
          "task": "Detect PR preview URL"
        },
        {
          "agent": "playwright-specialist",
          "task": "Run smoke tests on preview"
        },
        {
          "agent": "qa",
          "task": "Test critical user flows"
        },
        {
          "agent": "performance",
          "task": "Check performance metrics"
        },
        {
          "agent": "documentation-writer",
          "task": "Update PR with test results"
        }
      ]
    },
    "cross-browser-compatibility": {
      "description": "Test across different browsers and devices",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Test in Chrome, Firefox, Safari"
        },
        {
          "agent": "frontend-ux-specialist",
          "task": "Test responsive design on mobile viewports"
        },
        {
          "agent": "frontend-specialist",
          "task": "Fix browser-specific issues"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify fixes across all browsers"
        }
      ]
    },
    "form-interaction-testing": {
      "description": "Comprehensive form testing workflow",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Test form field interactions"
        },
        {
          "agent": "security-threat-analyst",
          "task": "Verify validation and security"
        },
        {
          "agent": "frontend-ux-specialist",
          "task": "Check keyboard navigation and ARIA"
        },
        {
          "agent": "playwright-specialist",
          "task": "Test error states and edge cases"
        }
      ]
    },
    "performance-monitoring-setup": {
      "description": "Set up continuous performance monitoring",
      "steps": [
        {
          "agent": "playwright-specialist",
          "task": "Establish performance baselines"
        },
        {
          "agent": "performance",
          "task": "Define performance budgets"
        },
        {
          "agent": "platform-deployment",
          "task": "Set up monitoring alerts"
        },
        {
          "agent": "playwright-specialist",
          "task": "Create performance regression tests"
        }
      ]
    },
    "component-interaction-flow": {
      "description": "Test complex component interactions",
      "steps": [
        {
          "agent": "system-architect",
          "task": "Map component dependencies"
        },
        {
          "agent": "playwright-specialist",
          "task": "Test component integration scenarios"
        },
        {
          "agent": "frontend-specialist",
          "task": "Fix interaction issues"
        },
        {
          "agent": "playwright-specialist",
          "task": "Verify state management and data flow"
        }
      ]
    }
  }
}