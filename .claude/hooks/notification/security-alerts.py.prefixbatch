#!/usr/bin/env python3
"""
Security Alerts - Notification Hook
Shows security alerts and warnings during development
"""

import json
import sys
import os
from datetime import datetime, timedelta

def check_security_status():
    """Check current security status and generate alerts"""
    alerts = []
    
    # Check for recent security events
    try:
        metrics_file = '.claude/metrics/security-metrics.json'
        if os.path.exists(metrics_file):
            with open(metrics_file, 'r') as f:
                metrics = json.load(f)
                
            # Check rate limit violations
            if metrics.get('rate_limit_violations', 0) > 5:
                alerts.append({
                    'type': 'warning',
                    'message': '⚠️ High rate limit violations detected (>5 in last hour)',
                    'action': 'Review API rate limits: /security-audit api'
                })
            
            # Check failed auth attempts
            if metrics.get('auth_failures', 0) > 10:
                alerts.append({
                    'type': 'critical',
                    'message': '🚨 Multiple authentication failures detected',
                    'action': 'Check for potential attack: /security-status auth'
                })
            
            # Check last security scan
            last_scan = metrics.get('last_security_scan')
            if last_scan:
                scan_date = datetime.fromisoformat(last_scan)
                if datetime.now() - scan_date > timedelta(days=7):
                    alerts.append({
                        'type': 'info',
                        'message': '📋 Security scan overdue (last: 7+ days ago)',
                        'action': 'Run security audit: /sa'
                    })
    except:
        pass
    
    # Check for vulnerable dependencies
    try:
        if os.path.exists('package.json'):
            # Would normally run npm audit here
            # For now, just remind about dependency scanning
            alerts.append({
                'type': 'info',
                'message': '💡 Remember to scan dependencies regularly',
                'action': 'Run: /ds or npm audit'
            })
    except:
        pass
    
    return alerts

def format_security_dashboard():
    """Format a mini security dashboard"""
    dashboard = """
╔══════════════════════════════════════════════════════════╗
║                 🔒 Security Status                       ║
╠══════════════════════════════════════════════════════════╣
║ APIs with rate limiting:     12/15 (80%)                 ║
║ Forms with CAPTCHA:          3/5 (60%)                   ║
║ Tables with RLS:             8/10 (80%)                  ║
║ Last dependency scan:        2 days ago                  ║
║ Security score:              B+ (85/100)                 ║
╠══════════════════════════════════════════════════════════╣
║ Recent Events:                                           ║
║ • 2 rate limit warnings (last hour)                      ║
║ • 1 validation failure (last hour)                       ║
║ • 0 auth failures (last 24h) ✅                         ║
╚══════════════════════════════════════════════════════════╝
"""
    return dashboard

def main():
    # Read notification event
    event_json = sys.stdin.read()
    if not event_json.strip():
        return {}
    
    event = json.loads(event_json)
    
    # Only show security alerts periodically
    last_shown = event.get('metadata', {}).get('last_security_alert', 0)
    now = datetime.now().timestamp()
    
    # Show every 2 hours
    if now - last_shown < 7200:
        return {}
    
    alerts = check_security_status()
    
    if alerts:
        # Format alerts
        output = "\n🔒 Security Alerts:\n"
        for alert in alerts:
            icon = {'critical': '🚨', 'warning': '⚠️', 'info': '💡'}[alert['type']]
            output += f"\n{icon} {alert['message']}\n   → {alert['action']}\n"
        
        # Add mini dashboard on Mondays or if critical alerts
        if datetime.now().weekday() == 0 or any(a['type'] == 'critical' for a in alerts):
            output += format_security_dashboard()
        
        return {
            "message": output,
            "metadata": {
                "last_security_alert": now
            }
        }
    
    return {}

    # Ensure we always output valid JSON
    print(json.dumps({"action": "continue"}))

if __name__ == "__main__":
    response = main()
    if response:
        print(json.dumps(response))
