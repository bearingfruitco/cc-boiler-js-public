#!/usr/bin/env python3
"""
Security Analyzer - Post Tool Hook
Analyzes created files and suggests security improvements
"""

import json
import sys
import os

def get_security_suggestions(file_path, operation):
    """Generate security suggestions based on what was created"""
    suggestions = []
    
    # API route suggestions
    if '/api/' in file_path and file_path.endswith('.ts'):
        suggestions.extend([
            f"Run: /security-audit {file_path}",
            f"Add rate limiting: /enhance-api security {os.path.basename(file_path)}",
            "Generate tests: /test-security api"
        ])
    
    # Form component suggestions
    elif any(indicator in file_path for indicator in ['form', 'Form', 'contact', 'Contact']):
        suggestions.extend([
            f"Add CAPTCHA: /enhance-form security {os.path.basename(file_path)}",
            "Validate PII handling: /validate-pii-handling",
            "Audit form security: /audit-form-security"
        ])
    
    # Database/model suggestions
    elif any(indicator in file_path for indicator in ['schema', 'model', 'db/', 'database']):
        suggestions.extend([
            "Generate RLS policies: /generate-rls",
            "Review data access: /security-audit database",
            "Add field encryption: /enhance-security encryption"
        ])
    
    # General suggestions for new files
    if operation == 'write_file':
        suggestions.append("Quick security check: /security-check current")
    
    return suggestions

def check_security_status():
    """Check overall security status of the project"""
    status = {
        'apis_without_rate_limit': [],
        'forms_without_captcha': [],
        'tables_without_rls': [],
        'last_security_audit': None
    }
    
    # This would normally check actual files
    # For now, return empty status
    return status

def main():
    # Read the event data from stdin
    event_json = sys.stdin.read()
    event = json.loads(event_json)
    
    tool_use = event.get('toolUse', {})
    tool_name = tool_use.get('toolName', '')
    params = tool_use.get('params', {})
    result = event.get('toolResult', {})
    
    # Only analyze successful file operations
    if tool_name not in ['write_file', 'create_file'] or result.get('error'):
        return {}
    
    file_path = params.get('path', '')
    suggestions = get_security_suggestions(file_path, tool_name)
    
    if suggestions:
        output = "\nðŸ”’ Security Next Steps:\n"
        for i, suggestion in enumerate(suggestions, 1):
            output += f"{i}. {suggestion}\n"
        
        # Add to existing output
        existing_output = result.get('output', '')
        if existing_output:
            output = existing_output + "\n" + output
        
        return {
            "output": output,
            "metadata": {
                "security_suggestions": suggestions,
                "requires_security_review": True
            }
        }
    
    return {}

if __name__ == "__main__":
    response = main()
    if response:
        print(json.dumps(response))
